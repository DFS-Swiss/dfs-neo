// Mocks generated by Mockito 5.2.0 from annotations
// in neo/test/helpers/test_helpers.dart.
// Do not manually edit this file.

import 'dart:async' as _i12;
import 'dart:ui' as _i17;

import 'package:amazon_cognito_identity_dart_2/cognito.dart' as _i23;
import 'package:amplitude_flutter/amplitude.dart' as _i7;
import 'package:bugsnag_flutter/bugsnag_flutter.dart' as _i27;
import 'package:dio/dio.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:neo/enums/app_state.dart' as _i25;
import 'package:neo/enums/data_source.dart' as _i19;
import 'package:neo/enums/publisher_event.dart' as _i10;
import 'package:neo/models/stockdata_datapoint.dart' as _i13;
import 'package:neo/models/stockdatadocument.dart' as _i5;
import 'package:neo/models/user_balance_datapoint.dart' as _i6;
import 'package:neo/models/user_model.dart' as _i4;
import 'package:neo/models/userasset_datapoint.dart' as _i16;
import 'package:neo/services/analytics_service.dart' as _i21;
import 'package:neo/services/app_state_service.dart' as _i24;
import 'package:neo/services/cognito_service.dart' as _i22;
import 'package:neo/services/crashlytics_service.dart' as _i26;
import 'package:neo/services/data_handler_service.dart' as _i8;
import 'package:neo/services/data_service.dart' as _i18;
import 'package:neo/services/publisher_service.dart' as _i9;
import 'package:neo/services/rest_service.dart' as _i11;
import 'package:neo/types/api/stockdata_bulk_fetch_request.dart' as _i15;
import 'package:neo/types/restdata_storage_container.dart' as _i20;
import 'package:neo/types/stockdata_interval_enum.dart' as _i14;
import 'package:rxdart/rxdart.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeBehaviorSubject_0<T> extends _i1.Fake
    implements _i2.BehaviorSubject<T> {}

class _FakePublishSubject_1<T> extends _i1.Fake
    implements _i2.PublishSubject<T> {}

class _FakeDio_2 extends _i1.Fake implements _i3.Dio {}

class _FakeUserModel_3 extends _i1.Fake implements _i4.UserModel {}

class _FakeStockdataDocument_4 extends _i1.Fake
    implements _i5.StockdataDocument {}

class _FakeUserBalanceDatapoint_5 extends _i1.Fake
    implements _i6.UserBalanceDatapoint {}

class _FakeAmplitude_6 extends _i1.Fake implements _i7.Amplitude {}

/// A class which mocks [DataHandlerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataHandlerService extends _i1.Mock
    implements _i8.DataHandlerService {
  MockDataHandlerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BehaviorSubject<Map<String, dynamic>> get dataUpdateStream =>
      (super.noSuchMethod(Invocation.getter(#dataUpdateStream),
              returnValue: _FakeBehaviorSubject_0<Map<String, dynamic>>())
          as _i2.BehaviorSubject<Map<String, dynamic>>);
  @override
  dynamic registerUserDataHandler(
          String? entity, List<dynamic Function()>? handler) =>
      super.noSuchMethod(
          Invocation.method(#registerUserDataHandler, [entity, handler]));
  @override
  _i2.BehaviorSubject<Map<String, dynamic>> getDataUpdateStream() =>
      (super.noSuchMethod(Invocation.method(#getDataUpdateStream, []),
              returnValue: _FakeBehaviorSubject_0<Map<String, dynamic>>())
          as _i2.BehaviorSubject<Map<String, dynamic>>);
  @override
  dynamic addToDataUpstream(String? key, Object? data) =>
      super.noSuchMethod(Invocation.method(#addToDataUpstream, [key, data]));
  @override
  dynamic addErrorToDataUpstream(String? key, Object? e) =>
      super.noSuchMethod(Invocation.method(#addErrorToDataUpstream, [key, e]));
}

/// A class which mocks [PublisherService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPublisherService extends _i1.Mock implements _i9.PublisherService {
  MockPublisherService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PublishSubject<_i10.PublisherEvent> getSource() =>
      (super.noSuchMethod(Invocation.method(#getSource, []),
              returnValue: _FakePublishSubject_1<_i10.PublisherEvent>())
          as _i2.PublishSubject<_i10.PublisherEvent>);
  @override
  dynamic addEvent(_i10.PublisherEvent? subscription) =>
      super.noSuchMethod(Invocation.method(#addEvent, [subscription]));
}

/// A class which mocks [RESTService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRESTService extends _i1.Mock implements _i11.RESTService {
  MockRESTService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Dio get dio =>
      (super.noSuchMethod(Invocation.getter(#dio), returnValue: _FakeDio_2())
          as _i3.Dio);
  @override
  set dio(_i3.Dio? _dio) => super.noSuchMethod(Invocation.setter(#dio, _dio),
      returnValueForMissingStub: null);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i12.Future<List<_i13.StockdataDatapoint>> getStockdata(
          String? symbol, _i14.StockdataInterval? interval,
          {int? retryCount = 0}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getStockdata, [symbol, interval], {#retryCount: retryCount}),
              returnValue: Future<List<_i13.StockdataDatapoint>>.value(
                  <_i13.StockdataDatapoint>[]))
          as _i12.Future<List<_i13.StockdataDatapoint>>);
  @override
  _i12.Future<Map<String, Map<_i14.StockdataInterval, List<_i13.StockdataDatapoint>>>> getStockdataBulk(
          _i15.StockdataBulkFetchRequest? request,
          {int? retryCount = 0}) =>
      (super.noSuchMethod(
          Invocation.method(
              #getStockdataBulk, [request], {#retryCount: retryCount}),
          returnValue: Future<Map<String, Map<_i14.StockdataInterval, List<_i13.StockdataDatapoint>>>>.value(
              <String, Map<_i14.StockdataInterval, List<_i13.StockdataDatapoint>>>{})) as _i12
          .Future<Map<String, Map<_i14.StockdataInterval, List<_i13.StockdataDatapoint>>>>);
  @override
  _i12.Future<_i4.UserModel> getUserData({int? retryCount = 0}) =>
      (super.noSuchMethod(
              Invocation.method(#getUserData, [], {#retryCount: retryCount}),
              returnValue: Future<_i4.UserModel>.value(_FakeUserModel_3()))
          as _i12.Future<_i4.UserModel>);
  @override
  _i12.Future<_i5.StockdataDocument> getStockInfo(String? symbol,
          {int? retryCount = 0}) =>
      (super.noSuchMethod(
          Invocation.method(#getStockInfo, [symbol], {#retryCount: retryCount}),
          returnValue: Future<_i5.StockdataDocument>.value(
              _FakeStockdataDocument_4())) as _i12
          .Future<_i5.StockdataDocument>);
  @override
  _i12.Future<List<_i5.StockdataDocument>> getStockInfoBulk(
          List<String>? symbols,
          {int? retryCount = 0}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getStockInfoBulk, [symbols], {#retryCount: retryCount}),
              returnValue: Future<List<_i5.StockdataDocument>>.value(
                  <_i5.StockdataDocument>[]))
          as _i12.Future<List<_i5.StockdataDocument>>);
  @override
  _i12.Future<bool> addBalance(String? amount) =>
      (super.noSuchMethod(Invocation.method(#addBalance, [amount]),
          returnValue: Future<bool>.value(false)) as _i12.Future<bool>);
  @override
  _i12.Future<List<_i5.StockdataDocument>> getAvailiableStocks(
          {int? retryCount = 0}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getAvailiableStocks, [], {#retryCount: retryCount}),
              returnValue: Future<List<_i5.StockdataDocument>>.value(
                  <_i5.StockdataDocument>[]))
          as _i12.Future<List<_i5.StockdataDocument>>);
  @override
  _i12.Future<List<_i16.UserassetDatapoint>> getUserAssets(
          {int? retryCount = 0}) =>
      (super.noSuchMethod(
              Invocation.method(#getUserAssets, [], {#retryCount: retryCount}),
              returnValue: Future<List<_i16.UserassetDatapoint>>.value(
                  <_i16.UserassetDatapoint>[]))
          as _i12.Future<List<_i16.UserassetDatapoint>>);
  @override
  _i12.Future<List<_i16.UserassetDatapoint>> getUserAssetsHistory(
          {_i14.StockdataInterval? interval, int? retryCount = 0}) =>
      (super.noSuchMethod(
              Invocation.method(#getUserAssetsHistory, [],
                  {#interval: interval, #retryCount: retryCount}),
              returnValue: Future<List<_i16.UserassetDatapoint>>.value(
                  <_i16.UserassetDatapoint>[]))
          as _i12.Future<List<_i16.UserassetDatapoint>>);
  @override
  _i12.Future<List<_i6.UserBalanceDatapoint>> getUserBalanceHistory(
          {_i14.StockdataInterval? interval, int? retryCount = 0}) =>
      (super.noSuchMethod(
              Invocation.method(#getUserBalanceHistory, [],
                  {#interval: interval, #retryCount: retryCount}),
              returnValue: Future<List<_i6.UserBalanceDatapoint>>.value(
                  <_i6.UserBalanceDatapoint>[]))
          as _i12.Future<List<_i6.UserBalanceDatapoint>>);
  @override
  _i12.Future<_i6.UserBalanceDatapoint> getBalance({int? retryCount = 0}) =>
      (super.noSuchMethod(
              Invocation.method(#getBalance, [], {#retryCount: retryCount}),
              returnValue: Future<_i6.UserBalanceDatapoint>.value(
                  _FakeUserBalanceDatapoint_5()))
          as _i12.Future<_i6.UserBalanceDatapoint>);
  @override
  _i12.Future<List<_i16.UserassetDatapoint>> getAssetForSymbol(String? symbol,
          {int? retryCount = 0}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getAssetForSymbol, [symbol], {#retryCount: retryCount}),
              returnValue: Future<List<_i16.UserassetDatapoint>>.value(
                  <_i16.UserassetDatapoint>[]))
          as _i12.Future<List<_i16.UserassetDatapoint>>);
  @override
  _i12.Future<bool> buyAsset(String? symbol, double? amountInDollar) => (super
      .noSuchMethod(Invocation.method(#buyAsset, [symbol, amountInDollar]),
          returnValue: Future<bool>.value(false)) as _i12.Future<bool>);
  @override
  _i12.Future<bool> sellAsset(String? symbol, double? ammountOfTokensToSell) =>
      (super.noSuchMethod(
          Invocation.method(#sellAsset, [symbol, ammountOfTokensToSell]),
          returnValue: Future<bool>.value(false)) as _i12.Future<bool>);
  @override
  void addListener(_i17.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i17.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [DataService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataService extends _i1.Mock implements _i18.DataService {
  MockDataService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  dynamic handleUserDataUpdate(String? message) =>
      super.noSuchMethod(Invocation.method(#handleUserDataUpdate, [message]));
  @override
  T? getDataFromCacheIfAvaliable<T>(String? key) => (super
          .noSuchMethod(Invocation.method(#getDataFromCacheIfAvaliable, [key]))
      as T?);
  @override
  _i12.Stream<_i4.UserModel> getUserData(
          {_i19.DataSource? source = _i19.DataSource.cache}) =>
      (super.noSuchMethod(
              Invocation.method(#getUserData, [], {#source: source}),
              returnValue: Stream<_i4.UserModel>.empty())
          as _i12.Stream<_i4.UserModel>);
  @override
  _i12.Stream<_i5.StockdataDocument> getStockInfo(String? symbol,
          {_i19.DataSource? source = _i19.DataSource.cache}) =>
      (super.noSuchMethod(
              Invocation.method(#getStockInfo, [symbol], {#source: source}),
              returnValue: Stream<_i5.StockdataDocument>.empty())
          as _i12.Stream<_i5.StockdataDocument>);
  @override
  _i12.Stream<List<_i5.StockdataDocument>> getAvailableStocks(
          {_i19.DataSource? source = _i19.DataSource.cache}) =>
      (super.noSuchMethod(
              Invocation.method(#getAvailableStocks, [], {#source: source}),
              returnValue: Stream<List<_i5.StockdataDocument>>.empty())
          as _i12.Stream<List<_i5.StockdataDocument>>);
  @override
  _i12.Stream<List<_i16.UserassetDatapoint>> getUserAssets(
          {_i19.DataSource? source = _i19.DataSource.cache}) =>
      (super.noSuchMethod(
              Invocation.method(#getUserAssets, [], {#source: source}),
              returnValue: Stream<List<_i16.UserassetDatapoint>>.empty())
          as _i12.Stream<List<_i16.UserassetDatapoint>>);
  @override
  _i12.Stream<List<_i16.UserassetDatapoint>> getUserAssetsHistory(
          {_i19.DataSource? source = _i19.DataSource.cache}) =>
      (super.noSuchMethod(
              Invocation.method(#getUserAssetsHistory, [], {#source: source}),
              returnValue: Stream<List<_i16.UserassetDatapoint>>.empty())
          as _i12.Stream<List<_i16.UserassetDatapoint>>);
  @override
  _i12.Stream<List<_i6.UserBalanceDatapoint>> getUserBalanceHistory(
          {_i19.DataSource? source = _i19.DataSource.cache}) =>
      (super.noSuchMethod(
              Invocation.method(#getUserBalanceHistory, [], {#source: source}),
              returnValue: Stream<List<_i6.UserBalanceDatapoint>>.empty())
          as _i12.Stream<List<_i6.UserBalanceDatapoint>>);
  @override
  _i12.Stream<_i6.UserBalanceDatapoint> getUserBalance(
          {_i19.DataSource? source = _i19.DataSource.cache}) =>
      (super.noSuchMethod(
              Invocation.method(#getUserBalance, [], {#source: source}),
              returnValue: Stream<_i6.UserBalanceDatapoint>.empty())
          as _i12.Stream<_i6.UserBalanceDatapoint>);
  @override
  _i12.Future<bool> buyAsset(String? symbol, double? amountInDollar) => (super
      .noSuchMethod(Invocation.method(#buyAsset, [symbol, amountInDollar]),
          returnValue: Future<bool>.value(false)) as _i12.Future<bool>);
  @override
  _i12.Future<bool> sellAsset(String? symbol, double? ammountOfTokensToSell) =>
      (super.noSuchMethod(
          Invocation.method(#sellAsset, [symbol, ammountOfTokensToSell]),
          returnValue: Future<bool>.value(false)) as _i12.Future<bool>);
  @override
  _i12.Future<bool> addUserBalance(String? amount) =>
      (super.noSuchMethod(Invocation.method(#addUserBalance, [amount]),
          returnValue: Future<bool>.value(false)) as _i12.Future<bool>);
  @override
  _i12.Stream<List<_i16.UserassetDatapoint>> getUserAssetsForSymbol(
          String? symbol) =>
      (super.noSuchMethod(Invocation.method(#getUserAssetsForSymbol, [symbol]),
              returnValue: Stream<List<_i16.UserassetDatapoint>>.empty())
          as _i12.Stream<List<_i16.UserassetDatapoint>>);
  @override
  _i2.BehaviorSubject<Map<String, _i20.RestdataStorageContainer>>
      getDataStore() => (super.noSuchMethod(
              Invocation.method(#getDataStore, []),
              returnValue: _FakeBehaviorSubject_0<
                  Map<String, _i20.RestdataStorageContainer>>())
          as _i2.BehaviorSubject<Map<String, _i20.RestdataStorageContainer>>);
  @override
  void addListener(_i17.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i17.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [AnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticsService extends _i1.Mock implements _i21.AnalyticsService {
  MockAnalyticsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Amplitude get amplitude =>
      (super.noSuchMethod(Invocation.getter(#amplitude),
          returnValue: _FakeAmplitude_6()) as _i7.Amplitude);
  @override
  _i12.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  _i12.Future<void> identifyUser({bool? forwardToCrashlytics = true}) =>
      (super.noSuchMethod(
          Invocation.method(
              #identifyUser, [], {#forwardToCrashlytics: forwardToCrashlytics}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub:
              Future<void>.value()) as _i12.Future<void>);
  @override
  _i12.Future<void> trackEvent(String? eventType,
          {Map<String, dynamic>? eventProperties,
          bool? outOfSession,
          bool? forwardToCrashlytics = true}) =>
      (super.noSuchMethod(
              Invocation.method(#trackEvent, [
                eventType
              ], {
                #eventProperties: eventProperties,
                #outOfSession: outOfSession,
                #forwardToCrashlytics: forwardToCrashlytics
              }),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i12.Future<void>);
}

/// A class which mocks [CognitoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCognitoService extends _i1.Mock implements _i22.CognitoService {
  MockCognitoService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool isIdTokenExpired() =>
      (super.noSuchMethod(Invocation.method(#isIdTokenExpired, []),
          returnValue: false) as bool);
  @override
  bool isSessionPresent() =>
      (super.noSuchMethod(Invocation.method(#isSessionPresent, []),
          returnValue: false) as bool);
  @override
  dynamic createAndAuthenticateUser(String? username, String? password) =>
      super.noSuchMethod(
          Invocation.method(#createAndAuthenticateUser, [username, password]));
  @override
  dynamic confirmRegistration(String? code) =>
      super.noSuchMethod(Invocation.method(#confirmRegistration, [code]));
  @override
  bool isUserPresent() =>
      (super.noSuchMethod(Invocation.method(#isUserPresent, []),
          returnValue: false) as bool);
  @override
  dynamic sendNewPasswordRequired(String? newPassword) => super
      .noSuchMethod(Invocation.method(#sendNewPasswordRequired, [newPassword]));
  @override
  _i12.Future<_i23.CognitoUser?> getCurrentPoolUser() =>
      (super.noSuchMethod(Invocation.method(#getCurrentPoolUser, []),
              returnValue: Future<_i23.CognitoUser?>.value())
          as _i12.Future<_i23.CognitoUser?>);
  @override
  dynamic registerUser(String? userName, String? email, String? password) =>
      super.noSuchMethod(
          Invocation.method(#registerUser, [userName, email, password]));
  @override
  dynamic changePassword(String? oldPassword, String? newPassword) =>
      super.noSuchMethod(
          Invocation.method(#changePassword, [oldPassword, newPassword]));
  @override
  dynamic initForgotPassword(String? username) =>
      super.noSuchMethod(Invocation.method(#initForgotPassword, [username]));
  @override
  dynamic completeForgotPassword(String? code, String? newPassword) =>
      super.noSuchMethod(
          Invocation.method(#completeForgotPassword, [code, newPassword]));
}

/// A class which mocks [AppStateService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppStateService extends _i1.Mock implements _i24.AppStateService {
  MockAppStateService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i25.AppState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _i25.AppState.signedOut) as _i25.AppState);
  @override
  set state(_i25.AppState? newState) =>
      super.noSuchMethod(Invocation.setter(#state, newState),
          returnValueForMissingStub: null);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void addListener(_i17.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i17.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [CrashlyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCrashlyticsService extends _i1.Mock
    implements _i26.CrashlyticsService {
  MockCrashlyticsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void start({String? apiKey, _i12.FutureOr<void> Function()? runApp}) =>
      super.noSuchMethod(
          Invocation.method(#start, [], {#apiKey: apiKey, #runApp: runApp}),
          returnValueForMissingStub: null);
  @override
  _i12.Future<void> identifyUser() => (super.noSuchMethod(
      Invocation.method(#identifyUser, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  _i12.Future<void> logError(dynamic error, StackTrace? trace) =>
      (super.noSuchMethod(Invocation.method(#logError, [error, trace]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i12.Future<void>);
  @override
  _i12.Future<void> leaveBreadcrumb(String? eventType,
          {Map<String, Object>? eventProperties,
          _i27.BugsnagBreadcrumbType? type =
              _i27.BugsnagBreadcrumbType.manual}) =>
      (super.noSuchMethod(
              Invocation.method(#leaveBreadcrumb, [eventType],
                  {#eventProperties: eventProperties, #type: type}),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i12.Future<void>);
}
