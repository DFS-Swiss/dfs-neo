// Mocks generated by Mockito 5.2.0 from annotations
// in neo/test/helpers/test_helpers.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:ui' as _i9;

import 'package:amazon_cognito_identity_dart_2/cognito.dart' as _i6;
import 'package:amplitude_flutter/amplitude.dart' as _i2;
import 'package:bugsnag_flutter/bugsnag_flutter.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:neo/enums/app_state.dart' as _i8;
import 'package:neo/services/analytics_service.dart' as _i3;
import 'package:neo/services/app_state_service.dart' as _i7;
import 'package:neo/services/cognito_service.dart' as _i5;
import 'package:neo/services/crashlytics_service.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeAmplitude_0 extends _i1.Fake implements _i2.Amplitude {}

/// A class which mocks [AnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticsService extends _i1.Mock implements _i3.AnalyticsService {
  MockAnalyticsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Amplitude get amplitude =>
      (super.noSuchMethod(Invocation.getter(#amplitude),
          returnValue: _FakeAmplitude_0()) as _i2.Amplitude);
  @override
  _i4.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> identifyUser({bool? forwardToCrashlytics = true}) =>
      (super.noSuchMethod(
          Invocation.method(
              #identifyUser, [], {#forwardToCrashlytics: forwardToCrashlytics}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> trackEvent(String? eventType,
          {Map<String, dynamic>? eventProperties,
          bool? outOfSession,
          bool? forwardToCrashlytics = true}) =>
      (super.noSuchMethod(
          Invocation.method(#trackEvent, [
            eventType
          ], {
            #eventProperties: eventProperties,
            #outOfSession: outOfSession,
            #forwardToCrashlytics: forwardToCrashlytics
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}

/// A class which mocks [CognitoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCognitoService extends _i1.Mock implements _i5.CognitoService {
  MockCognitoService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool isIdTokenExpired() =>
      (super.noSuchMethod(Invocation.method(#isIdTokenExpired, []),
          returnValue: false) as bool);
  @override
  bool isSessionPresent() =>
      (super.noSuchMethod(Invocation.method(#isSessionPresent, []),
          returnValue: false) as bool);
  @override
  dynamic createAndAuthenticateUser(String? username, String? password) =>
      super.noSuchMethod(
          Invocation.method(#createAndAuthenticateUser, [username, password]));
  @override
  dynamic confirmRegistration(String? code) =>
      super.noSuchMethod(Invocation.method(#confirmRegistration, [code]));
  @override
  bool isUserPresent() =>
      (super.noSuchMethod(Invocation.method(#isUserPresent, []),
          returnValue: false) as bool);
  @override
  dynamic sendNewPasswordRequired(String? newPassword) => super
      .noSuchMethod(Invocation.method(#sendNewPasswordRequired, [newPassword]));
  @override
  _i4.Future<_i6.CognitoUser?> getCurrentPoolUser() =>
      (super.noSuchMethod(Invocation.method(#getCurrentPoolUser, []),
              returnValue: Future<_i6.CognitoUser?>.value())
          as _i4.Future<_i6.CognitoUser?>);
  @override
  dynamic registerUser(String? userName, String? email, String? password) =>
      super.noSuchMethod(
          Invocation.method(#registerUser, [userName, email, password]));
  @override
  dynamic changePassword(String? oldPassword, String? newPassword) =>
      super.noSuchMethod(
          Invocation.method(#changePassword, [oldPassword, newPassword]));
  @override
  dynamic initForgotPassword(String? username) =>
      super.noSuchMethod(Invocation.method(#initForgotPassword, [username]));
  @override
  dynamic completeForgotPassword(String? code, String? newPassword) =>
      super.noSuchMethod(
          Invocation.method(#completeForgotPassword, [code, newPassword]));
}

/// A class which mocks [AppStateService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppStateService extends _i1.Mock implements _i7.AppStateService {
  MockAppStateService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.AppState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _i8.AppState.signedOut) as _i8.AppState);
  @override
  set state(_i8.AppState? newState) =>
      super.noSuchMethod(Invocation.setter(#state, newState),
          returnValueForMissingStub: null);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void addListener(_i9.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i9.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [CrashlyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCrashlyticsService extends _i1.Mock
    implements _i10.CrashlyticsService {
  MockCrashlyticsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void start({String? apiKey, _i4.FutureOr<void> Function()? runApp}) =>
      super.noSuchMethod(
          Invocation.method(#start, [], {#apiKey: apiKey, #runApp: runApp}),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> identifyUser() =>
      (super.noSuchMethod(Invocation.method(#identifyUser, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> leaveBreadcrumb(String? eventType,
          {Map<String, Object>? eventProperties,
          _i11.BugsnagBreadcrumbType? type =
              _i11.BugsnagBreadcrumbType.manual}) =>
      (super.noSuchMethod(
          Invocation.method(#leaveBreadcrumb, [eventType],
              {#eventProperties: eventProperties, #type: type}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}
